import { SlashCommandBuilder } from 'discord.js';
import { jutsuDB } from '../../mongodb.js';

export const data = new SlashCommandBuilder()
    .setName('pp')
    .setDescription('Exibe os dados de um personagem.')

    .addSubcommand(subcommand => //principal
    subcommand
      .setName('principal')
      .setDescription('Exibe os dados principais do personagem.')

      .addStringOption(option =>
        option.setName('personagem_selecionado')
            .setDescription('Qual personagem deseja visualizar os dados? O padr√£o √© "Personagem Principal"')
            .addChoices(
                { name: `Personagem Principal`, value: 'normal' },
                { name: `Invoca√ß√£o [S1]`, value: 'invs1' },
                { name: 'Invoca√ß√£o [S2]', value: 'invs2' },
                { name: 'Invoca√ß√£o [S3]', value: 'invs3' })
      )

    .addUserOption(option =>
      option.setName('outro_jogador')
        .setDescription('[OPCIONAL] Deseja ver os dados de outro personagem?')
        .setRequired(false)
    )
    )

    .addSubcommand(subcommand => //jutsus
    subcommand
      .setName('jutsus')
      .setDescription('Exibe os jutsus de um personagem.')

      .addUserOption(option =>
        option.setName('outro_jogador')
          .setDescription('[OPCIONAL] Deseja ver os jutsus de outro personagem?')
          .setRequired(false)
      )
    )

    .addSubcommand(subcommand => //talentos
    subcommand
      .setName('talentos')
      .setDescription('Exibe os talentos ninja de um personagem.')

      .addUserOption(option =>
        option.setName('outro_jogador')
          .setDescription('[OPCIONAL] Deseja ver os talentos de outro personagem?')
          .setRequired(false)
      )
    )

    .addSubcommand(subcommand => //trades
    subcommand
      .setName('trades')
      .setDescription('Exibe os trades de um personagem.')

      .addUserOption(option =>
        option.setName('outro_jogador')
          .setDescription('[OPCIONAL] Deseja ver os trades de outro personagem?')
          .setRequired(false)
      )
    )

    .addSubcommand(subcommand => //extras
    subcommand
      .setName('extras')
      .setDescription('Exibe as informa√ß√µes extras de um personagem.')

      .addUserOption(option =>
        option.setName('outro_jogador')
          .setDescription('[OPCIONAL] Deseja ver os extras de outro personagem?')
          .setRequired(false)
      )
    )

    .setContexts(0)

export async function execute(interaction, userAccount, userDB, infoGameDB, itemDB, client) {
    await interaction.deferReply({ ephemeral: true })
    const typeCommand = interaction.options.getSubcommand();
    let targetAccount = interaction.options.getUser('outro_jogador')

    if (targetAccount && targetAccount.id !== userAccount?.id_dc) {
        if (userAccount.staff >= 1) {
            let targetAccountDB = await userDB.findOne({"id_dc": targetAccount.id})
            if (!targetAccountDB?.ficha1?.active) return await interaction.editReply({ content: `**<@${targetAccount.id}>** n√£o √© um alvo v√°lido ou ele n√£o possu√≠ um personagem ativo.`});
            userAccount = targetAccountDB
        }
        else {
            return await interaction.editReply(`Voc√™ n√£o tem permiss√£o de usar esse comando, apenas S1 ou superior.`)
        }
    }

    if (typeCommand === "principal") {
        const characterSelected = interaction.options.getString('personagem_selecionado') ? interaction.options.getString('personagem_selecionado') : 'normal';
        const characterType = characterSelected.slice(0, -1);
        const characterSlot = characterSelected.slice(-1);

        let mochilaContent = '';
        const inventorySlots = Object.keys(userAccount.ficha1.inventario)
        for (let i = 1; i <= inventorySlots.length; i++) {
          const slot = userAccount.ficha1.inventario[`slot${i}`];
          if (slot) {
            mochilaContent += `> S${i}: ${slot.nome} (x${slot.quantia})\n`;
          }
        }

        const ppNinja = `> **- üìú ID Ninja:** ${userAccount.ficha1.idNinja}
> **- ‚úèÔ∏è Nome:** ${userAccount.ficha1.name}
> **- üöª Sexo:** ${userAccount.ficha1.gender}
> **- ‚¨ÜÔ∏è N√≠vel:** ${userAccount.ficha1.level} (${userAccount.ficha1.xpCurrent}/${userAccount.ficha1.xpNextFix})
> **- ‚ù§Ô∏è‚Äçüî• Status:** ${userAccount.ficha1.state} ${userAccount.ficha1.tempo.finish > new Date() ? `**(Fim: ${userAccount.ficha1.tempo.finish.toLocaleString('pt-BR')})**` : ""}

> **- üß≠ Local:** ${userAccount.ficha1.local}
> **- üÄÑ Cl√£:** ${userAccount.ficha1.cla}
> **- üìÜ Idade:** ${userAccount.ficha1.age}

> **- üìö PJ:** ${userAccount.ficha1.pointsJutsus}/6
> **- üéØ MS:** ${userAccount.ficha1.ms.state ? "‚úÖ" : "‚ùå"}
> **- üèãÔ∏è TD:** ${userAccount.ficha1.td ? "‚úÖ" : "‚ùå"}
> **- üèÉ‚Äç‚ôÇÔ∏è TS:** ${userAccount.ficha1.ts ? "‚úÖ" : "‚ùå"}
> **- ü§∏‚Äç‚ôÇÔ∏è TQ:** ${userAccount.ficha1.tq ? "‚úÖ" : "‚ùå"}
> **- üí™ TM:** ${userAccount.ficha1.tm ? "‚úÖ" : "‚ùå"}
> **- üìö TC:** ${userAccount.ficha1.tc.state ? "‚úÖ" : "‚ùå"}

> **- üß¨ KKG:** ${userAccount.ficha1.kkg || "Nenhuma"}

> **- üî± Modos:**
>   Oito Port√µes: ${userAccount.ficha1.modos?.oito_p ?? 0}/8
>   Modo Biju: ${userAccount.ficha1.modos?.biju ?? 0}/4
>   Modo Eremita: ${userAccount.ficha1.modos?.eremita ?? 0}/2
>   Karma: ${userAccount.ficha1.modos?.karma ?? 0}/5

> **- üëÅÔ∏è Doujutsus (N√≠vel):**
>   Byakugan: ${userAccount.ficha1.doujutsus.byakugan}
>   Sharingan: ${userAccount.ficha1.doujutsus.sharingan}
>   Ketsuryugan: ${userAccount.ficha1.doujutsus.ketsuryuugan}
>   Tenseigan: ${userAccount.ficha1.doujutsus.tenseigan}
>   Rinnegan: ${userAccount.ficha1.doujutsus.rinnegan}

> **- ü©∏ TS:** ${userAccount.ficha1.bloodType}
> **- Invoca√ß√µes:**
>   ü¶Å S1: ${userAccount.ficha1.invs.slot1.nome}
>   üêØ S2: ${userAccount.ficha1.invs.slot2.nome}

> **- üåÄ Elementos:** ${userAccount.ficha1.elementos}
> **- üåç Vila:** ${userAccount.ficha1.vila}

> **- Atributos**
>   ü´Ä HP: ${userAccount.ficha1.atb.hpTemp}/${userAccount.ficha1.atb.hp}
>   üî∑ CK: ${userAccount.ficha1.atb.ckTemp}/${userAccount.ficha1.atb.ck}
>   ‚ö° Energia: ${userAccount.ficha1.atb.energiaTemp}/${userAccount.ficha1.atb.energia}

>   üîµ N: ${userAccount.ficha1.atb.nTemp}/${userAccount.ficha1.atb.n}
>   üß† G: ${userAccount.ficha1.atb.gTemp}/${userAccount.ficha1.atb.g}
>   ü¶æ T: ${userAccount.ficha1.atb.tTemp}/${userAccount.ficha1.atb.t}

>   üõ°Ô∏è DN: ${userAccount.ficha1.atb.dnTemp}/${userAccount.ficha1.atb.dn}
>   üõ°Ô∏è DG: ${userAccount.ficha1.atb.dgTemp}/${userAccount.ficha1.atb.dg}
>   üõ°Ô∏è DT: ${userAccount.ficha1.atb.dtTemp}/${userAccount.ficha1.atb.dt}

>   üî• DC: ${userAccount.ficha1.atb.dcTemp}/${userAccount.ficha1.atb.dc}
>   üî• DR: ${userAccount.ficha1.atb.drTemp}/${userAccount.ficha1.atb.dr}
>   üî• MU: ${userAccount.ficha1.atb.muTemp}/${userAccount.ficha1.atb.mu}

> **- üå≥ PTN Livres (${userAccount.ficha1.atb.ptnTotal}/20):** ${userAccount.ficha1.atb.ptn}
> **- üÜì Pontos Livres:** ${userAccount.ficha1.atb.pontosLivres}
> **- üî• Pontos Totais:** ${userAccount.ficha1.atb.pontosTotais} (Sem b√¥nus: ${userAccount.ficha1.atb.pontosTotaisSemBonus})

> **- üí∞ Ryou:** ${userAccount.ficha1.ryou.toLocaleString('pt-BR')}
> **- üéñÔ∏è Patente:** ${userAccount.ficha1.patente}

> **- üéí Mochila**\n${mochilaContent}

> **- üéØ Total de Miss√µes:**
>   Rank D: ${userAccount.ficha1.stacs.missions.d}
>   Rank C: ${userAccount.ficha1.stacs.missions.c}
>   Rank B: ${userAccount.ficha1.stacs.missions.b}
>   Rank A: ${userAccount.ficha1.stacs.missions.a}
>   Rank S: ${userAccount.ficha1.stacs.missions.s}

> **- üèãÔ∏è Total de Treinos:**
>   Di√°rio: ${userAccount.ficha1.stacs.td}
>   Semanal: ${userAccount.ficha1.stacs.ts}
>   Quinzenal: ${userAccount.ficha1.stacs.tq}
>   Mensal: ${userAccount.ficha1.stacs.tm}
>   Chakra: ${userAccount.ficha1.stacs.tc}/4`
        
        if (characterSelected === "normal") {
            await interaction.editReply({ content: ppNinja }); 
        }
        else {
            if (userAccount.ficha1[characterType][`slot${characterSlot}`].nome === "Vazio") return await interaction.editReply({ content: `Voc√™ n√£o possui um personagem "${characterType}" no S${characterSlot}. Use **/pp** e verifique.` }); 
            const ppOther = `> **- ‚úèÔ∏è Nome:** ${userAccount.ficha1[characterType][`slot${characterSlot}`].nome}
            
> **- Atributos**
>   üîµ Ninjutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].nTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].n}
>   üß† Genjutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].gTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].g}
>   ü¶æ Taijutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].tTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].t}

>   üõ°Ô∏è Defesa Ninjutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].dnTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].dn}
>   üõ°Ô∏è Defesa Genjutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].dgTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].dg}
>   üõ°Ô∏è Defesa Taijutsu: ${userAccount.ficha1[characterType][`slot${characterSlot}`].dtTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].dt}

>   ü´Ä HP: ${userAccount.ficha1[characterType][`slot${characterSlot}`].hpTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].hp}
>   üî∑ Chakra: ${userAccount.ficha1[characterType][`slot${characterSlot}`].ckTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].ck}
>   ‚ö° Energia: ${userAccount.ficha1[characterType][`slot${characterSlot}`].energiaTemp}/${userAccount.ficha1[characterType][`slot${characterSlot}`].energia}`
        await interaction.editReply({ content: ppOther }); 
        }
    }

    if (typeCommand === "jutsus") {
      let jutsusList = `**Jutsus do ${userAccount.ficha1.name}**\n\n`;
      
      if (userAccount.ficha1.jutsus.length === 0) {
        jutsusList += 'Nenhum jutsu treinado.';
        return await interaction.editReply({ content: jutsusList });
      } 
      else {
        const jutsuIds = userAccount.ficha1.jutsus;
        const lastJutsuId = Number(jutsuIds [jutsuIds.length - 1]);
        let messageToSend = '';
        
        for (let i = 0; i < jutsuIds.length; i++) {
          const jutsuId = Number(jutsuIds[i]);
          const jutsuDesc = await jutsuDB.findOne({ idJutsu: jutsuId });
      
          let tempMessage = `**‚Ä¢ Nome:** ${jutsuDesc.nome} **(${jutsuDesc.rank})**\n`;
          tempMessage += `**‚Ä¢ ID:** ${jutsuId}\n`;
          tempMessage += `**‚Ä¢ Desc:** ${jutsuDesc.desc}\n\n`;
          
          if ((messageToSend + tempMessage).length > 2000) {
            await interaction.followUp({ content: messageToSend, ephemeral: true });
            messageToSend = '';
          }

          messageToSend += tempMessage;

          if (jutsuId === lastJutsuId) {
            await interaction.followUp({ content: messageToSend, ephemeral: true });
          }
        }
      }
    }

    if (typeCommand === "talentos") {
        function criarCampoTalentos(talentosObj) {
            const maxNivel = 4; // N√≠vel m√°ximo padr√£o dos talentos
            const talentos = Object.keys(talentosObj);
          
            if (talentos.length === 0) {
              return "> ¬ª Nenhum";
            } else {
              const talentosTexto = talentos
                .map((talento) => {
                  const nome = talentosObj[talento].name;
                  const nivel = talentosObj[talento].n || 1; // Caso o n√≠vel n√£o esteja definido, usa 1 como padr√£o
                  return `> ¬ª ${nome} **(N√≠vel ${nivel}/${maxNivel})**`;
                })
                .join("\n");
          
              return talentosTexto;
            }
        }
        const talentosObj = userAccount.ficha1.talentos || {};
        const talentosString = criarCampoTalentos(talentosObj);
        const talentsList = `**Talentos Ninja do ${userAccount.ficha1.name}**\n\n${talentosString}`
    
        await interaction.editReply({ content: talentsList }); 
    }

    if (typeCommand === "trades") {
        const ppTrades = `**Trades do ${userAccount.ficha1.name}**

> **ü§ù 1¬∫ Oferta**
>   ‚Ä¢ Nome do item: ${userAccount.ficha1.trades.trade1.nomeItem}
>   ‚Ä¢ Nome do jogador: ${userAccount.ficha1.trades.trade1.nomeJogador}
>   ‚Ä¢ Nome do personagem: ${userAccount.ficha1.trades.trade1.nomePersonagem}
>   ‚Ä¢ Quantidade: ${userAccount.ficha1.trades.trade1.quantia}
>   ‚Ä¢ Custo: ${userAccount.ficha1.trades.trade1.custo}

> **ü§ù 2¬∫ Oferta**
>   ‚Ä¢ Nome do item: ${userAccount.ficha1.trades.trade2.nomeItem}
>   ‚Ä¢ Nome do jogador: ${userAccount.ficha1.trades.trade2.nomeJogador}
>   ‚Ä¢ Nome do personagem: ${userAccount.ficha1.trades.trade2.nomePersonagem}
>   ‚Ä¢ Quantidade: ${userAccount.ficha1.trades.trade2.quantia}
>   ‚Ä¢ Custo: ${userAccount.ficha1.trades.trade2.custo}

> **ü§ù 3¬∫ Oferta:**
>   ‚Ä¢ Nome do item: ${userAccount.ficha1.trades.trade3.nomeItem}
>   ‚Ä¢ Nome do jogador: ${userAccount.ficha1.trades.trade3.nomeJogador}
>   ‚Ä¢ Nome do personagem: ${userAccount.ficha1.trades.trade3.nomePersonagem}
>   ‚Ä¢ Quantidade: ${userAccount.ficha1.trades.trade3.quantia}
>   ‚Ä¢ Custo: ${userAccount.ficha1.trades.trade3.custo}`
    
        await interaction.editReply({ content: ppTrades }); 
    }

    if (typeCommand === "extras") {  
      await interaction.editReply({ content: `Informa√ß√µes Extras: ${userAccount.ficha1.extras}` }); 
  }
}